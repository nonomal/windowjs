name: macOS build

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'examples/**'
      - 'tests/**'
      - 'types/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'examples/**'
      - 'tests/**'
      - 'types/**'
  release:
    types: [published]

  # Allows running this workflow manually from the Actions tab.
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install packages
        run: brew install upx

      - name: Cache
        id: cache-libraries
        uses: actions/cache@v3
        with:
          path: |
            libraries/angle/include
            libraries/angle/out/Release/obj/libEGL_static.a
            libraries/depot_tools
            libraries/gn
            libraries/glfw
            libraries/ninja
            libraries/skia/include
            libraries/skia/modules
            libraries/skia/out/Release/libskia.a
            libraries/v8/include
            libraries/v8/src
            libraries/v8/third_party/zlib
            libraries/v8/out/Release/obj/libv8_monolith.a
            libraries/libuv
          key: ${{ runner.os }}-build-cache-v3-${{ hashFiles('.gclient', 'libraries/build_skia.sh', 'libraries/skia-args-mac.gn', 'libraries/skia.patch', 'libraries/build_v8.sh', 'libraries/v8-args-mac.gn', 'libraries/v8.patch', 'libraries/glfw.patch', 'libraries/build_angle.sh', 'libraries/angle-args-mac.gn', 'libraries/angle.patch') }}

      - name: Sync
        if: steps.cache-libraries.outputs.cache-hit != 'true'
        run: |
          source libraries/setup_build_env.sh
          libraries/sync.sh

      - name: Build Skia
        if: steps.cache-libraries.outputs.cache-hit != 'true'
        run: |
          source libraries/setup_build_env.sh
          libraries/build_skia.sh

      - name: Build ANGLE
        if: steps.cache-libraries.outputs.cache-hit != 'true'
        run: |
          source libraries/setup_build_env.sh
          libraries/build_angle.sh

      - name: Build v8
        if: steps.cache-libraries.outputs.cache-hit != 'true'
        run: |
          source libraries/setup_build_env.sh
          libraries/build_v8.sh

      - name: Release build
        run: |
          source libraries/setup_build_env.sh
          cmake -S. -B out -DCMAKE_BUILD_TYPE=Release -G Ninja
          cmake --build out -t windowjs -t windowjs-p5
          strip out/windowjs
          strip out/windowjs-p5

# Tests are disabled in the macOS workflow because GLFW fails to initialize:
# https://github.com/windowjs/windowjs/issues/64
#
#      - name: Debug build
#        run: |
#          source libraries/setup_build_env.sh
#          cmake -S. -B out-debug -DCMAKE_BUILD_TYPE=Debug -G Ninja
#          cmake --build out-debug -t windowjs -t windowjs-p5
#
#      - name: Tests
#        run: |
#          # Note: run tests in Debug to have more assertions.
#          out-debug/windowjs tests/run_tests.js

      - name: Binary size
        run: |
          echo "Binary size after build:"
          stat -f%z out/windowjs
          upx -9 out/windowjs
          upx -9 out/windowjs-p5
          echo "Binary size after upx:"
          stat -f%z out/windowjs

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windowjs
          path: |
            out/windowjs
            out/windowjs-p5
